// Generated by CoffeeScript 1.7.1
(function() {
  var attrExists, buildLocalStoreLabel, buildLocalStorePairs, buildOption, buildSelectOptionsFor, chooseWinner, clearNewGameChoiceFlags, expireAttr, gameData, getAncestors, getBracketEntry, getDescendant, loadBracket, loadBracketAncestors, loadBracketData, localStore, nameTeam, sendGameUpdates, sendTeamNameUpdate, showError, storeAncestorData, updateLocalBracket, updateOptions, wipeTextField;

  nameTeam = function(target) {
    var t, _i, _len, _ref, _results;
    _ref = $(target);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      _results.push(sendTeamNameUpdate(t));
    }
    return _results;
  };

  sendTeamNameUpdate = function(target) {
    var bracketId, newName, node, teamId;
    newName = target.value;
    node = $(target).closest('td').data('node');
    teamId = $(target).next()[0].value;
    bracketId = $('table.bracket').data('bracket_id');
    (bracketId == null) && (bracketId = $('table.bracket').data('bracket').id);
    return $.ajax({
      type: 'PUT',
      url: $(target).closest('form').attr('action'),
      data: {
        'team[name]': newName,
        'team[id]': teamId,
        'bracket[node]': node
      },
      success: function(data, textStatus, jqXHR) {
        return updateLocalBracket({
          node: node,
          data: data,
          name: newName,
          bracket_id: bracketId
        });
      },
      error: function(jqXHR, textStatus, errorThrown) {
        showError(errorThrown, textStatus);
        return wipeTextField(target);
      }
    });
  };

  wipeTextField = function(targetNode) {
    return targetNode.value = '';
  };

  showError = function(errorThrown, textStatus) {
    return alert(errorThrown);
  };

  updateLocalBracket = function(input) {
    var $gameNode, bId, d, n;
    n = input.node;
    bId = input.bracket_id;
    if (input.name != null) {
      Store.set(buildLocalStoreLabel(bId, n, 'name'), input.name);
    } else if (input.winner != null) {
      Store.set(buildLocalStoreLabel(bId, n, 'winner'), input.winner);
      Store.set(buildLocalStoreLabel(bId, n, 'winners_label'), input.winners_label);
      Store.set(buildLocalStoreLabel(bId, n, 'is_new'), true);
    }
    d = getDescendant(n);
    if (d != null) {
      $gameNode = $('select#game_' + d);
      $gameNode.empty();
      $gameNode.append($.parseHTML(buildSelectOptionsFor(bId, d)));
    }
  };

  getAncestors = function(n) {
    var a;
    a = Store.get('a_' + n);
    (a != null) || (a = []);
    return a;
  };

  getDescendant = function(n) {
    var d;
    d = Store.get('d_' + n);
    (d != null) || (d = '');
    return d;
  };

  buildSelectOptionsFor = function(bracketId, node) {
    var ancestor, optionString, _i, _len, _ref;
    optionString = '<option value>Choose winner...</option>';
    _ref = getAncestors(node);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ancestor = _ref[_i];
      optionString += buildOption(bracketId, ancestor);
    }
    return optionString;
  };

  buildOption = function(bId, n) {
    var displayName, value, _ref;
    _ref = getBracketEntry(bId, n), displayName = _ref[0], value = _ref[1];
    return "\n" + '<option value="' + value + '">' + displayName + '</option>';
  };

  getBracketEntry = function(bId, n) {
    var e, name;
    e = Store.get(buildLocalStoreLabel(bId, n, 'name'));
    if (e != null) {
      name = e;
      e = n;
    } else {
      e = Store.get(buildLocalStoreLabel(bId, n, 'winners_label'));
      name = Store.get(buildLocalStoreLabel(bId, e, 'name'));
    }
    (name == null) && (name = '');
    (e == null) && (e = '');
    return [name, e];
  };

  chooseWinner = function(target) {
    var t, _i, _len, _ref;
    _ref = $(target);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      updateOptions(t);
    }
  };

  updateOptions = function(target) {
    var bId, node, winner, winnerLabel;
    node = $(target).attr('node');
    winnerLabel = $(target).find(':selected').val();
    bId = $('table.bracket').data('bracket_id');
    winner = $(target).find(':selected').text();
    updateLocalBracket({
      node: node,
      winner: winner,
      bracket_id: bId,
      winners_label: winnerLabel
    });
  };

  localStore = function(i, n) {
    var p, pairs, _i, _len;
    pairs = buildLocalStorePairs(i, n);
    for (_i = 0, _len = pairs.length; _i < _len; _i++) {
      p = pairs[_i];
      Store.set(p[0], p[1]);
    }
  };

  buildLocalStorePairs = function(i, n) {
    var localStorePairs, name, val;
    localStorePairs = (function() {
      var _results;
      _results = [];
      for (name in n) {
        val = n[name];
        if (name !== 'label') {
          _results.push([buildLocalStoreLabel(i, n.label, name), val]);
        }
      }
      return _results;
    })();
    return localStorePairs;
  };

  buildLocalStoreLabel = function(bid, node, attr) {
    return "" + bid + "_" + node + "_" + attr;
  };

  storeAncestorData = function(node, ancestors) {
    var a, _i, _len;
    Store.set('a_' + node, ancestors);
    for (_i = 0, _len = ancestors.length; _i < _len; _i++) {
      a = ancestors[_i];
      Store.set('d_' + a, node);
    }
  };

  loadBracket = function(e) {
    loadBracketData();
    loadBracketAncestors();
  };

  loadBracketData = function() {
    var bracketId, data, node, _i, _len, _ref;
    data = $('table.bracket').data('bracket');
    bracketId = data.id;
    clearNewGameChoiceFlags(bracketId);
    _ref = data.nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      localStore(bracketId, node);
    }
    $('table.bracket').data('bracket', '');
    $('table.bracket').data('bracket_id', bracketId);
  };

  loadBracketAncestors = function() {
    var a, ancestors, n;
    ancestors = $('table.bracket').data('ancestors');
    for (n in ancestors) {
      a = ancestors[n];
      storeAncestorData(n, a);
    }
  };

  gameData = function(g, bId) {
    var l, w;
    if (attrExists(bId, g, 'is_new')) {
      w = Store.get(buildLocalStoreLabel(bId, g, 'winner'));
      l = Store.get(buildLocalStoreLabel(bId, g, 'winners_label'));
      return [g, w, l];
    } else {
      return null;
    }
  };

  expireAttr = function(bId, g, attr) {
    return Store.expire(buildLocalStoreLabel(bId, g, attr));
  };

  attrExists = function(bId, g, attr) {
    return Store.get(buildLocalStoreLabel(bId, g, attr)) != null;
  };

  clearNewGameChoiceFlags = function(bId) {
    var g, _i, _results;
    _results = [];
    for (g = _i = 63; _i >= 1; g = --_i) {
      if (attrExists(bId, g, 'is_new')) {
        _results.push(expireAttr(bId, g, 'is_new'));
      }
    }
    return _results;
  };

  sendGameUpdates = function(e) {
    var bId, g, gameDataCached, sendMe, target;
    e.preventDefault();
    target = e.target;
    bId = $('table.bracket').data('bracket_id');
    sendMe = (function() {
      var _i, _results;
      _results = [];
      for (g = _i = 63; _i >= 1; g = --_i) {
        if ((gameDataCached = gameData(g, bId)) != null) {
          _results.push(gameDataCached);
        }
      }
      return _results;
    })();
    $.ajax({
      contentType: 'application/json',
      type: 'PUT',
      url: $(target).closest('form').attr('action'),
      data: JSON.stringify({
        "game_data": sendMe
      }),
      success: function(data, textStatus, jqXHR) {
        return clearNewGameChoiceFlags(bId);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        return showError(errorThrown, textStatus);
      }
    });
    return false;
  };

  $(function() {
    $('input.team_name').on('change', (function(_this) {
      return function(e) {
        return nameTeam(e.target);
      };
    })(this));
    $('select.game_winner').on('change', (function(_this) {
      return function(e) {
        return chooseWinner(e.target);
      };
    })(this));
    $('button#submit_games').on('click', (function(_this) {
      return function(e) {
        return sendGameUpdates(e);
      };
    })(this));
    return $('table.bracket').one('focusin', (function(_this) {
      return function(e) {
        return loadBracket(e.target);
      };
    })(this));
  });

}).call(this);
